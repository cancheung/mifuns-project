<?xml version="1.0" encoding="UTF-8" ?>
<!--
       Copyright 2009-2011 The MyBatis Team

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
-->
<!DOCTYPE configuration
		PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	<settings>
		<setting name="logImpl" value="SLF4J"/>
	</settings>
	<!--
		分页插件支持以下两种调用方式：
			第一种，RowBounds方式的调用
				1.List<Country> list = sqlSession.selectList("x.y.selectIf", null, new RowBounds(1, 10));
				可以使用RowBounds参数进行分页，这种方式侵入性最小，我们可以看到，通过RowBounds方式调用只是使用了这个参数
				分页插件检测到使用了RowBounds参数时，就会对该查询进行物理分页。
				2.不只有命名空间方式可以用RowBounds，使用接口的时候也可以增加RowBounds参数，例如：
				这种情况下也会进行物理分页查询
				List<Country> selectAll(RowBounds rowBounds);
			第二种，Mapper接口方式的调用，推荐这种使用方式。
				获取第1页，10条内容，默认查询总数count
				PageHelper.startPage(1, 10);
				List<Country> list = countryMapper.selectIf(1);
			三，使用PageInfo的用法：
				//获取第1页，10条内容，默认查询总数count
				PageHelper.startPage(1, 10);
				List<Country> list = countryMapper.selectAll();
				//用PageInfo对结果进行包装
				PageInfo page = new PageInfo(list);
				//测试PageInfo全部属性
				//PageInfo包含了非常全面的分页属性
				assertEquals(1, page.getPageNum());
				assertEquals(10, page.getPageSize());
				assertEquals(1, page.getStartRow());
				assertEquals(10, page.getEndRow());
				assertEquals(183, page.getTotal());
				assertEquals(19, page.getPages());
				assertEquals(1, page.getFirstPage());
				assertEquals(8, page.getLastPage());
				assertEquals(true, page.isFirstPage());
				assertEquals(false, page.isLastPage());
				assertEquals(false, page.isHasPreviousPage());
				assertEquals(true, page.isHasNextPage());
	-->
	<!--
		plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:
		properties?, settings?,
		typeAliases?, typeHandlers?,
		objectFactory?,objectWrapperFactory?,
		plugins?,
		environments?, databaseIdProvider?, mappers?
	-->
	<plugins>
		<plugin interceptor="com.github.pagehelper.PageHelper">
			<!-- 4.0.0以后版本可以不设置该参数 -->
			<property name="dialect" value="mysql"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			<!-- 和startPage中的pageNum效果一样-->
			<property name="offsetAsPageNum" value="true"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
			<property name="rowBoundsWithCount" value="true"/>
			<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
			<property name="pageSizeZero" value="true"/>
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
			<property name="reasonable" value="false"/>
			<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
			<!-- 不理解该含义的前提下，不要随便复制该配置 -->
			<property name="params" value="pageNum=pageHelperStart;pageSize=pageHelperRows;"/>
			<!-- 支持通过Mapper接口参数来传递分页参数 -->
			<property name="supportMethodsArguments" value="false"/>
			<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			<property name="returnPageInfo" value="none"/>
		</plugin>
	</plugins>

</configuration>
